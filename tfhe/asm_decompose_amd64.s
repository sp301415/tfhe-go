// Code generated by command: go run asmgen.go -decompose -out ../../tfhe/asm_decompose_amd64.s -stubs ../../tfhe/asm_decompose_stub_amd64.go -pkg=tfhe. DO NOT EDIT.

//go:build amd64 && !purego

#include "textflag.h"

DATA ONE<>+0(SB)/8, $0x0000000000000001
GLOBL ONE<>(SB), RODATA|NOPTR, $8

// func decomposePolyToUint32AVX2(dcmpOut [][]uint32, p []uint32, base uint32, logBase uint32, logLastBaseQ uint32)
// Requires: AVX, AVX2
TEXT ·decomposePolyToUint32AVX2(SB), NOSPLIT, $0-60
	MOVQ         dcmpOut_base+0(FP), AX
	MOVQ         p_base+24(FP), CX
	MOVQ         p_len+32(FP), DX
	MOVQ         dcmpOut_len+8(FP), BX
	VPBROADCASTD base+48(FP), Y0
	VPBROADCASTD logBase+52(FP), Y1
	VPBROADCASTD logLastBaseQ+56(FP), Y2
	VPBROADCASTD ONE<>+0(SB), Y3
	VPSUBD       Y3, Y0, Y4
	VPSRLD       $0x01, Y0, Y0
	VPSUBD       Y3, Y1, Y5
	XORQ         SI, SI
	JMP          N_loop_end

N_loop_body:
	VMOVDQU (CX)(SI*4), Y6
	VPSRLVD Y2, Y6, Y7
	VPSLLD  $0x01, Y6, Y6
	VPSRLVD Y2, Y6, Y6
	VANDPD  Y3, Y6, Y6
	VPADDD  Y6, Y7, Y6
	MOVQ    BX, DI
	SUBQ    $0x01, DI
	MOVQ    DI, R8
	ADDQ    DI, R8
	ADDQ    DI, R8
	JMP     level_loop_end

level_loop_body:
	VANDPD  Y4, Y6, Y7
	VPSRLVD Y1, Y6, Y6
	VPSRLVD Y5, Y7, Y8
	VPADDD  Y8, Y6, Y6
	VANDPD  Y0, Y7, Y8
	VPSLLD  $0x01, Y8, Y8
	VPSUBD  Y8, Y7, Y7
	MOVQ    (AX)(R8*8), R9
	VMOVDQU Y7, (R9)(SI*4)
	SUBQ    $0x01, DI
	SUBQ    $0x03, R8

level_loop_end:
	CMPQ    DI, $0x01
	JGE     level_loop_body
	VANDPD  Y4, Y6, Y6
	VANDPD  Y0, Y6, Y7
	VPSLLD  $0x01, Y7, Y7
	VPSUBD  Y7, Y6, Y6
	MOVQ    (AX), DI
	VMOVDQU Y6, (DI)(SI*4)
	ADDQ    $0x08, SI

N_loop_end:
	CMPQ SI, DX
	JL   N_loop_body
	RET

// func decomposePolyToUint64AVX2(dcmpOut [][]uint64, p []uint64, base uint64, logBase uint64, logLastBaseQ uint64)
// Requires: AVX, AVX2
TEXT ·decomposePolyToUint64AVX2(SB), NOSPLIT, $0-72
	MOVQ         dcmpOut_base+0(FP), AX
	MOVQ         p_base+24(FP), CX
	MOVQ         p_len+32(FP), DX
	MOVQ         dcmpOut_len+8(FP), BX
	VPBROADCASTQ base+48(FP), Y0
	VPBROADCASTQ logBase+56(FP), Y1
	VPBROADCASTQ logLastBaseQ+64(FP), Y2
	VPBROADCASTQ ONE<>+0(SB), Y3
	VPSUBQ       Y3, Y0, Y4
	VPSRLQ       $0x01, Y0, Y0
	VPSUBQ       Y3, Y1, Y5
	XORQ         SI, SI
	JMP          N_loop_end

N_loop_body:
	VMOVDQU (CX)(SI*8), Y6
	VPSRLVQ Y2, Y6, Y7
	VPSLLQ  $0x01, Y6, Y6
	VPSRLVQ Y2, Y6, Y6
	VANDPD  Y3, Y6, Y6
	VPADDQ  Y6, Y7, Y6
	MOVQ    BX, DI
	SUBQ    $0x01, DI
	MOVQ    DI, R8
	ADDQ    DI, R8
	ADDQ    DI, R8
	JMP     level_loop_end

level_loop_body:
	VANDPD  Y4, Y6, Y7
	VPSRLVQ Y1, Y6, Y6
	VPSRLVQ Y5, Y7, Y8
	VPADDQ  Y8, Y6, Y6
	VANDPD  Y0, Y7, Y8
	VPSLLQ  $0x01, Y8, Y8
	VPSUBQ  Y8, Y7, Y7
	MOVQ    (AX)(R8*8), R9
	VMOVDQU Y7, (R9)(SI*8)
	SUBQ    $0x01, DI
	SUBQ    $0x03, R8

level_loop_end:
	CMPQ    DI, $0x01
	JGE     level_loop_body
	VANDPD  Y4, Y6, Y6
	VANDPD  Y0, Y6, Y7
	VPSLLQ  $0x01, Y7, Y7
	VPSUBQ  Y7, Y6, Y6
	MOVQ    (AX), DI
	VMOVDQU Y6, (DI)(SI*8)
	ADDQ    $0x04, SI

N_loop_end:
	CMPQ SI, DX
	JL   N_loop_body
	RET
